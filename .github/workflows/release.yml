# From https://github.com/cristianadam/ccache/blob/master/.github/workflows/cmake_build.yml
name: CMake Build Matrix

on:
  push:

env:
  CMAKE_VERSION: 3.19.2
  NINJA_VERSION: 1.10.2
  BUILD_TYPE: Release

concurrency:
  group: release-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'

  create-release:
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:
          gh api repos/${{github.repository}}/releases
            --jq '.[] | select(.draft == true) | .id'
            | xargs -I '{}' gh api -X DELETE repos/${{github.repository}}/releases/{}

      # Create a new release draft
      - run:
          gh release create "v${{ github.run_number }}"
          --repo ${{ github.repository }}
          --title "${{ github.event.head_commit.message }}"
          --generate-notes
          --notes "Workflow in progress https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          --target ${{ github.sha }}
          --draft
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    needs: [ create-release ]
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MinGW", artifact: "Windows.tar.xz",
            os: windows-latest,
            cc: "gcc", cxx: "g++"
          }
          - {
            name: "Ubuntu Latest GCC", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }
          - {
            name: "macOS Latest Clang", artifact: "macOS.tar.xz",
            os: macos-latest,
            cc: "clang", cxx: "clang++"
          }

    steps:
      - uses: actions/checkout@v1

      - name: Download Ninja and CMake
        id: cmake_and_ninja
        shell: cmake -P {0}
        run: |
          set(cmake_version $ENV{CMAKE_VERSION})
          set(ninja_version $ENV{NINJA_VERSION})
          
          message(STATUS "Using host CMake version: ${CMAKE_VERSION}")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(ninja_suffix "win.zip")
            set(cmake_suffix "win64-x64.zip")
            set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(ninja_suffix "linux.zip")
            set(cmake_suffix "Linux-x86_64.tar.gz")
            set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            set(ninja_suffix "mac.zip")
            set(cmake_suffix "macos-universal.tar.gz")
            set(cmake_dir "cmake-${cmake_version}-macos-universal/CMake.app/Contents/bin")
          endif()
          set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
          file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)
          set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
          file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)
          # Save the path for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
          message("::set-output name=cmake_dir::${cmake_dir}")
          if (NOT "${{ runner.os }}" STREQUAL "Windows")
            execute_process(
              COMMAND chmod +x ninja
              COMMAND chmod +x ${cmake_dir}/cmake
            )
          endif()

      - name: Configure
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})
          
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(extra_configure -D CMAKE_C_FLAGS_RELEASE_INIT=-fno-asynchronous-unwind-tables)
          endif()
          
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/ninja" ninja_program)
          execute_process(
            COMMAND ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake
              -S .
              -B build
              -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
              -G Ninja
              -D CMAKE_MAKE_PROGRAM=${ninja_program}
              -D ZSTD_FROM_INTERNET=ON
              -D HIREDIS_FROM_INTERNET=ON
              ${extra_configure}
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: Build
        env:
          NINJA_STATUS: "[%f/%t %o/sec] "
        run: ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake --build build

      - name: Run tests
        env:
          CTEST_OUTPUT_ON_FAILURE: ON
        shell: cmake -P {0}
        run: |
          include(ProcessorCount)
          ProcessorCount(N)
          execute_process(
            COMMAND ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/ctest -j ${N}
            WORKING_DIRECTORY build
            RESULT_VARIABLE result
          )
          #if (NOT result EQUAL 0)
          #  message(FATAL_ERROR "Running tests failed!")
          #endif()

      - name: Install Strip
        run: ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake --install build --prefix instdir --strip

      - name: Pack
        working-directory: instdir/bin
        run: ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/cmake -E tar cJfv ../../${{ matrix.config.artifact }} .

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

      - name: Upload release
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: gh release upload "v${{ github.run_number }}" ${{ matrix.config.artifact }}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notes-finish:
    runs-on: ubuntu-22.04

    needs: [ build ]
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - run: |
          gh release view "v${{ github.run_number }}" --repo ${{ github.repository }} --json body --jq ".body" > notes.txt
          sed -i '/Workflow in progress/d' ./notes.txt
          echo "" >> notes.txt
          echo "✅ Workflow completed https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> notes.txt
          gh release edit "v${{ github.run_number }}" --repo ${{ github.repository }} --notes-file notes.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notes-error:
    runs-on: ubuntu-22.04

    needs: [ build ]
    if: (failure() || cancelled()) && github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - run: |
          gh release view "v${{ github.run_number }}" --repo ${{ github.repository }} --json body --jq ".body" > notes.txt
          sed -i '/Workflow in progress/d' ./notes.txt
          echo "❌ Workflow failed https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> notes.txt
          gh release edit "v${{ github.run_number }}" --repo ${{ github.repository }} --notes-file notes.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
